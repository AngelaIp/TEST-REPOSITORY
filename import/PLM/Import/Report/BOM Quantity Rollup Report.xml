<AML>
 <Item type="Report" id="2290D6D2214C4A38B5C08755AEE8A282" action="add">
  <description />
  <location>client</location>
  <report_query><![CDATA[<Item type="Part" action="get" id="{@id}" select="item_number,name">
 <Relationships>
  <Item type="Part BOM" select="sort_order,quantity,related_id(item_number,name)">
   <related_id>
    <Item type="Part" select="item_number,name">
     <Relationships>
      <Item type="Part BOM" select="sort_order,quantity,related_id(item_number,name)">
       <related_id>
        <Item type="Part" select="item_number,name">
         <Relationships>
          <Item type="Part BOM" select="sort_order,quantity,related_id(item_number,name)">
           <related_id>
            <Item type="Part" select="item_number,name">
             <Relationships>
              <Item type="Part BOM" select="sort_order,quantity,related_id(item_number,name)">
               <related_id>
                <Item type="Part" select="item_number,name">
                 <Relationships>
                  <Item type="Part BOM" select="sort_order,quantity,related_id(item_number,name)">
                   <related_id>
                    <Item type="Part" select="item_number,name"></Item>
                   </related_id>
                  </Item>
                 </Relationships>
                </Item>
               </related_id>
              </Item>
             </Relationships>
            </Item>
           </related_id>
          </Item>
         </Relationships>
        </Item>
       </related_id>
      </Item>
     </Relationships>
    </Item>
   </related_id>
  </Item>
 </Relationships>
</Item>]]></report_query>
  <target>one window</target>
  <type>item</type>
  <xsl_stylesheet><![CDATA[<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" extension-element-prefixes="exslt" xmlns:aras="http://www.aras-corp.com">
 <xsl:output method="html" omit-xml-declaration="yes" standalone="yes" indent="yes"></xsl:output>
 <xsl:template match="/">
  <html>
   <head>
   </head>
   <style type="text/css" userData="Global">
.cellSolid {text-align:center;border-top:1px #000000 solid;border-right:1px #000000 solid;border-bottom:1px #000000 solid;border-left:1px #000000 solid;}
.cellSolidTopRight {border-top:1px #000000 solid;border-right:1px #000000 solid;}
.cellSolidTopLeft {border-top:1px #000000 solid;border-left:1px #000000 solid;}
.cellSolidRightBottom {border-right:1px #000000 solid;border-bottom:1px #000000 solid;font-family:helvetica;font-size:8pt;}
.cellSolidBottomLeft {border-bottom:1px #000000 solid;border-left:1px #000000 solid;}
.cellSolidTop {border-top:1px #000000 solid;}
.cellSolidRight {border-right:1px #000000 solid;}
.cellSolidBottom {border-bottom:1px #000000 solid;}
.cellSolidLeft {border-left:1px #000000 solid;}
.cellDashed {border-top:1px #666666 dashed;border-right:1px #666666 dashed;border-bottom:1px #666666 dashed;border-left:1px #666666 dashed;}
.cellDashedTopRight {border-top:1px #666666 dashed;border-right:1px #666666 dashed;}
.cellDashedTopLeft {border-top:1px #666666 dashed;border-left:1px #666666 dashed;}
.cellDashedBottomRight {border-bottom:1px #666666 dashed;border-right:1px #666666 dashed;}
.cellDashedBottomLeft {border-bottom:1px #666666 dashed;border-left:1px #666666 dashed;}
.cellDashedTop {border-top:1px #666666 dashed;}
.cellDashedRight {border-right:1px #666666 dashed;}
.cellDashedBottom {border-bottom:1px #666666 dashed;}
.cellDashedLeft {border-left:1px #666666 dashed;}
.cellHeader {background-color:#CCCCCC;border-top:1px #000000 solid;border-right:1px #000000 solid;border-bottom:1px #000000 solid;padding:2px;text-align:center;text-transform:capitalize;text-align:center;font-family:helvetica;font-weight:bold;font-size:8pt;}
.cellTitle {border-top:1px #000000 solid;border-right:1px #000000 solid;border-left:1px #000000 solid;padding:2px;text-align:center;text-transform:capitalize;text-align:center;font-family:helvetica;font-weight:bold;font-size:8pt;}
   </style>
   <body topmargin="50" leftmargin="50">
    <table border="0" cellspacing="0" cellpadding="0" width="600">
     <tr>
      <td width="150"></td>
      <td width="250"></td>
      <td width="200"></td>
     </tr>
     <tr valign="top">
      <td align="left" uniqueID="ms__id77" colspan="3">
       <img src="../imagesLegacy/Logos/aras_logo.gif" height="80"></img>
      </td>
     </tr>
     <tr valign="bottom">
      <td colspan="2" style="font-family:helvetica;font-size:15pt;color:#DA1943;padding:2px;" align="left" uniqueID="ms__id79">Quantity Rollup Report for <xsl:value-of select="//Item/item_number"/></td>
      <td colspan="1" style="font-family:helvetica;font-size:10pt;padding:2px;" align="right" uniqueID="ms__id80">Generated on: <script>function m00(r, n){r += ""; if (!n) n = 2; while(r.length &lt; n){r = "0" + r;} return r;} var dt = new Date(); var a = top.opener.top.aras; if (a){var s = m00(dt.getUTCFullYear(),4)+"-"+m00((dt.getUTCMonth()+1))+"-"+m00(dt.getUTCDate())+"T"+m00(dt.getUTCHours())+":"+m00(dt.getUTCMinutes())+":"+m00(dt.getUTCSeconds()); s = a.IomInnovator.GetI18NSessionContext().ConvertUtcDateTimeToNeutral(s, "yyyy-MM-ddTHH:mm:ss"); s = a.convertFromNeutral(s, "date", "short_date"); document.write(s);}</script></td>
     </tr>
     <tr>
      <td class="cellHeader" style="border-left:1px #666666 solid;" uniqueID="ms__id89">Part Number</td>
      <td class="cellHeader" uniqueID="ms__id90">Name</td>
      <td class="cellHeader" uniqueID="ms__id88">Calculated Quantity</td>
     </tr>
      <xsl:call-template name="main"></xsl:call-template>
    </table>
   </body>
  </html>
 </xsl:template>
 
 <xsl:template name="main">
  <xsl:variable name="products"><!-- generate appropriate product for every item-->
   <xsl:call-template name="Unique"></xsl:call-template>
  </xsl:variable>
  <xsl:for-each select="//Item//Item[@type='Part']">
   <xsl:variable name="id" select="@id"></xsl:variable>
   <xsl:variable name="part_number">
    <xsl:value-of select="item_number"/>
    <xsl:if test="item_number='' or not(item_number)">
     <xsl:text>&#160;</xsl:text>
    </xsl:if>
   </xsl:variable>
   <xsl:variable name="part_name">
    <xsl:value-of select="name"/>
    <xsl:if test="name='' or not(name)">
     <xsl:text>&#160;</xsl:text>
    </xsl:if>
   </xsl:variable>
   <xsl:variable name="is_first" select="count(ancestor::Item[@type='Part' and @id=string($id)] | preceding::Item[@type='Part' and @id=string($id)])"></xsl:variable>
   <xsl:if test="$is_first = 0">
    <xsl:variable name="sum_of_products">
      <xsl:choose>
        <xsl:when test="function-available('exslt:node-set')">
          <xsl:value-of select="sum(exslt:node-set($products)/product_for_item[item_id = $id]/product)" />
        </xsl:when>
        <xsl:when test="function-available('msxsl:node-set')">
          <xsl:value-of select="sum(msxsl:node-set($products)/product_for_item[item_id = $id]/product)" />
        </xsl:when>
      </xsl:choose>
    </xsl:variable>
    <xsl:call-template name="draw_row_for_item">
     <xsl:with-param name="id" select="$id"></xsl:with-param>
     <xsl:with-param name="sum_of_products" select="$sum_of_products"></xsl:with-param>
     <xsl:with-param name="part_number" select="$part_number"></xsl:with-param>
     <xsl:with-param name="part_name" select="$part_name"></xsl:with-param>
    </xsl:call-template>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>
 
 <!-- Draw rows of table-->
 <xsl:template name="draw_row_for_item">
  <xsl:param name="id"></xsl:param>
  <xsl:param name="sum_of_products"></xsl:param>
  <xsl:param name="part_number"></xsl:param>
  <xsl:param name="part_name"></xsl:param>
  <tr>
   <td class="cellSolidRightBottom" style="border-left:1px #666666 solid;">
    <xsl:value-of select="$part_number"></xsl:value-of>
   </td>
   <td class="cellSolidRightBottom">
    <xsl:value-of select="$part_name"></xsl:value-of>
   </td>
   <td class="cellSolidRightBottom">
    <xsl:value-of select="$sum_of_products"></xsl:value-of>
   </td>
  </tr>
 </xsl:template>
 
 <!--use unique id and calculate quantity for item in current chain-->
 <xsl:template name="Unique">
  <xsl:for-each select="//Item[@type='Part']">
   <xsl:variable name="cur_id" select="@id"></xsl:variable>
   <xsl:if test="not(count(descendant::Item[@type='Part' and @id=string($cur_id)]))">
    <product_for_item>
     <item_id>
      <xsl:value-of select="$cur_id"></xsl:value-of>
     </item_id>
     <product>
      <xsl:variable name="quantity" select="../../quantity"></xsl:variable>
      <xsl:choose>
       <xsl:when test="string($quantity) = ''">0</xsl:when>
       <xsl:otherwise>
        <xsl:apply-templates mode="product_of_quantity" select="../..">
         <xsl:with-param name="product_of_chain" select="$quantity"></xsl:with-param>
        </xsl:apply-templates>
       </xsl:otherwise>
      </xsl:choose>
     </product>
    </product_for_item>
   </xsl:if>
  </xsl:for-each>
 </xsl:template>
 
 <!--calculate product of quantities for item in its chain -->
 <xsl:template mode="product_of_quantity" match="Item">
  <xsl:param name="product_of_chain"></xsl:param>
  <xsl:choose><!-- If current Part BOM at the top of the current chain -->
   <xsl:when test="not(count(ancestor::Item[@type='Part BOM']))">
    <xsl:value-of select="number($product_of_chain)"></xsl:value-of>
   </xsl:when>
   <xsl:otherwise><!-- Get the quantity of the next relationship Part BOM and apply recursion again for it-->
    <xsl:variable name="quantity" select="../../../../quantity"></xsl:variable>
    <xsl:apply-templates mode="product_of_quantity" select="../../../..">
     <xsl:with-param name="product_of_chain" select="number($quantity)*number($product_of_chain)"></xsl:with-param>
    </xsl:apply-templates>
   </xsl:otherwise>
  </xsl:choose>
 </xsl:template>
</xsl:stylesheet>
]]></xsl_stylesheet>
  <name>BOM Quantity Rollup Report</name>
 </Item>
</AML>
<AML>
 <Item type="Method" id="A34D557831094ED091C7E39B16CCE790" action="add">
  <execution_allowed_to keyed_name="Administrators" type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
  <method_code><![CDATA[	string effExpressionItemTypeId;
	string template = "effs_{0}_expression";
	string name = this.getProperty("name");
	string itemTypeId = this.getProperty("related_id");
	Item effExpressionItemType = GetEffectivityExpressionItemType(itemTypeId);
	if (effExpressionItemType != null)
	{
		effExpressionItemTypeId = effExpressionItemType.getID();
		if (!string.IsNullOrEmpty(name) && !effExpressionItemType.getProperty("name")
			.Equals(string.Format(CultureInfo.InvariantCulture, template, name.Replace(" ", "_")), StringComparison.OrdinalIgnoreCase))
		{
			Item itemType = GetItemTypeById(itemTypeId);
			if (itemType.isError())
			{
				return itemType;
			}
			return this.getInnovator().newError(CCO.ErrorLookup.Lookup("effs_ItemTypeWithOtherName", name, effExpressionItemType.getProperty("name"), itemType.getProperty("name")));
		}
	}
	else
	{
		Item itemType = GetItemTypeById(itemTypeId);
		if (itemType.isError())
		{
			return itemType;
		}

		string itemTypeName = itemType.getProperty("name");
		string itemTypeLabel = itemType.getProperty("label");

		if (string.IsNullOrWhiteSpace(itemTypeLabel))
		{
			itemTypeLabel = itemTypeName;
		}

		itemTypeLabel = itemTypeLabel.Trim();

		if (string.IsNullOrEmpty(name))
		{
			name = itemTypeName;
		}

		int maxNameLength = GetMaxNameLength();
		name = string.Format(CultureInfo.InvariantCulture, template, name.Replace(" ", "_"));
		if (name.Length > maxNameLength)
		{
			return this.getInnovator().newError(CCO.ErrorLookup.Lookup("effs_VeryLongName", maxNameLength.ToString(CultureInfo.InvariantCulture)));
		}

		Item existingRelType = GetExistingEffectivityRelationshipType(itemTypeId, name);
		// effs_{name}_expression relationship type should be created only if it does not exist.
		if (!existingRelType.isError())
		{
			effExpressionItemTypeId = existingRelType.getProperty("relationship_id");
		}
		else if (!string.Equals(existingRelType.getErrorCode(), "0", StringComparison.Ordinal))
		{
			return existingRelType;
		}
		else
		{
			Item effsExpressionPolyItemType = this.newItem("ItemType", "get");
			effsExpressionPolyItemType.setProperty("name", "effs_expression");
			effsExpressionPolyItemType.setAttribute("select", "large_icon,open_icon");
			effsExpressionPolyItemType = effsExpressionPolyItemType.apply();
			if (effsExpressionPolyItemType.isError())
			{
				return effsExpressionPolyItemType;
			}

			effExpressionItemTypeId = this.getNewID();

			Item effRelType = CreateEffectivityRelationshipType(itemTypeId, effExpressionItemTypeId, name, itemTypeLabel, effsExpressionPolyItemType.getProperty("large_icon"), effsExpressionPolyItemType.getProperty("open_icon"));
			if (effRelType.isError())
			{
				return effRelType;
			}

			// replace default form by other from effs_expression polymorphic
			Item error = ReplaceDefaultFormByUniversal(effExpressionItemTypeId, name);
			if (error != null)
			{
				return error;
			}

			// add new itemtype to effs_expression polymorphic
			Item effExpression = AddNewItemTypeToEffectivityExpression(effExpressionItemTypeId, effsExpressionPolyItemType.getID());
			if (effExpression.isError())
			{
				return effExpression;
			}
		}
	}

	this.setProperty("effs_expression_itemtype_id", effExpressionItemTypeId);

	return this;
}

private int GetMaxNameLength()
{
	Item nameProperty = this.newItem("Property", "get");
	nameProperty.setProperty("name", "name");
	nameProperty.setAttribute("select", "stored_length");
	Item itemtype = this.newItem("ItemType", "get");
	itemtype.setAttribute("select", "id");
	itemtype.setProperty("name", "ItemType");
	nameProperty.setPropertyItem("source_id", itemtype);
	nameProperty = nameProperty.apply();

	// 30 - max name length that is setup for ItemType name property
	return int.Parse(nameProperty.getProperty("stored_length"), CultureInfo.InvariantCulture);
}

private Item GetItemTypeById(string itemTypeId)
{
	Item itemType = this.newItem("ItemType", "get");
	itemType.setID(itemTypeId);
	itemType.setAttribute("select", "name,label");
	return itemType.apply();
}

private Item GetEffectivityExpressionItemType(string itemTypeId)
{
	Item checkItemType = this.newItem("effs_scope_itemtype", "get");
	checkItemType.setAttribute("select", "effs_expression_itemtype_id(name)");
	checkItemType.setAttribute("maxRecords", "1");
	checkItemType.setProperty("related_id", itemTypeId);
	checkItemType = checkItemType.apply();

	return checkItemType.isError() ? null : checkItemType.getPropertyItem("effs_expression_itemtype_id");
}

private Item GetExistingEffectivityRelationshipType(string itemTypeId, string name)
{
	// RelationshipType and associated relationship ItemType always have the same name (even if one of them was edited).
	Item effsRelationshipType = this.newItem("RelationshipType", "get");
	effsRelationshipType.setAttribute("select", "relationship_id");
	effsRelationshipType.setProperty("source_id", itemTypeId);
	effsRelationshipType.setProperty("name", name);

	Item effsItemType = effsRelationshipType.createPropertyItem("relationship_id", "ItemType", "get");
	effsItemType.setProperty("name", name);

	return effsRelationshipType.apply();
}

private Item CreateEffectivityRelationshipType(string itemTypeId, string effItemTypeId, string name, string itemTypeLabel, string largeIcon, string openIcon)
{
	string effsItemTypeLabel = itemTypeLabel + " Effectivity";

	// "effs_itemtype_name_expression" - create relationship
	Item effRelType = this.newItem("RelationshipType", "add");
	effRelType.setProperty("name", name);
	effRelType.setProperty("label", "Effectivity");
	effRelType.setProperty("source_id", itemTypeId);
	effRelType.setProperty("new_show_related", "0");
	effRelType.setProperty("related_notnull", "0");
	effRelType.setProperty("create_related", "0");
	effRelType.setProperty("related_option", "2");

	// "effs_itemtype_name_expression" - specify itemtype with needed properties
	Item effItemType = GetRelationshipItemType(effItemTypeId, name, effsItemTypeLabel, largeIcon, openIcon);
	effRelType.setPropertyItem("relationship_id", effItemType);
	return effRelType.apply();
}

private Item GetRelationshipItemType(string itemTypeId, string name, string label, string largeIcon, string openIcon)
{
	Item effItemType = this.newItem("ItemType", "add");
	effItemType.setID(itemTypeId);
	effItemType.setProperty("name", name);
	effItemType.setProperty("label", label);
	effItemType.setProperty("label_plural", label);
	effItemType.setProperty("is_relationship", "1");
	effItemType.setProperty("large_icon", largeIcon);
	effItemType.setProperty("open_icon", openIcon);

	Item scopeDataSourceItem = effItemType.newItem("ItemType", "get");
	scopeDataSourceItem.setProperty("name", "effs_scope");
	Item scopeIdField = CreateField("effs_scope_id", "Effectivity Scope", "item", scopeDataSourceItem);
	Item definitionField = CreateField("definition", "Definition", "text", null);
	effItemType.addRelationship(scopeIdField);
	effItemType.addRelationship(definitionField);

	Item clientEvent = CreateClientEvent();
	effItemType.addRelationship(clientEvent);

	return effItemType;
}

private Item CreateField(string name, string label, string datatype, Item datasource)
{
	Item field = this.newItem("Property", "add");
	field.setProperty("name", name);
	field.setProperty("data_type", datatype);
	if (datasource != null)
	{
		field.setPropertyItem("data_source", datasource);
	}
	field.setProperty("is_required", "1");
	field.setProperty("label", label);

	return field;
}

private Item CreateClientEvent()
{
	Item clientEvent = this.newItem("Client Event", "add");
	clientEvent.setProperty("client_event", "OnShowItem");

	Item relatedMethod = this.newItem("Method", "get");
	relatedMethod.setAttribute("select", "id");
	relatedMethod.setProperty("name", "effs_ExpressionOnShowItem");

	clientEvent.setRelatedItem(relatedMethod);

	return clientEvent;
}

private Item ReplaceDefaultFormByUniversal(string itemTypeId, string name)
{
	Item replaceDefaultView = this.newItem("View", "edit");
	replaceDefaultView.setAttribute("where", "[VIEW].[SOURCE_ID]='" + itemTypeId + "'");

	// use form from effs_expression polymorphic
	Item relatedForm = replaceDefaultView.newItem("Form", "get");
	relatedForm.setProperty("name", "effs_expression");
	replaceDefaultView.setRelatedItem(relatedForm);

	replaceDefaultView = replaceDefaultView.apply();
	if (replaceDefaultView.isError())
	{
		return replaceDefaultView;
	}

	Item deleteDefaultForm = this.newItem("Form", "delete");
	deleteDefaultForm.setAttribute("where", "[FORM].[NAME]='" + name + "'");
	deleteDefaultForm = deleteDefaultForm.apply();
	if (deleteDefaultForm.isError())
	{
		return deleteDefaultForm;
	}

	return null;
}

private Item AddNewItemTypeToEffectivityExpression(string itemTypeId, string effsExpressionPolyItemTypeId)
{
	Item effExpression = this.newItem("ItemType", "edit");
	effExpression.setID(effsExpressionPolyItemTypeId);
	Item morphae = effExpression.newItem("Morphae", "add");
	morphae.setProperty("related_id", itemTypeId);
	effExpression.addRelationship(morphae);
	return effExpression.apply();]]></method_code>
  <method_type>C#</method_type>
  <name>effs_ScopeItemTypeOnBeforeAdd</name>
 </Item>
</AML>